eventHandlers = {
    update_exploit: onExploitUpdate,
    delete_exploit: onExploitDelete
};

var exploit_table = $("#exploits");

var exploit_drop = $("#exploit_drop");
var exploit_name = $("#exploit_name");
var exploit_type = $("#exploit_type");
var exploit_preexec = $("#exploit_preexec");

var exploit_file = null;

function onExploitUpdate(event) {
    var exploit = $("<tr></tr>").attr("id", "exploit_id" + event.data.id);

    exploit.append($("<td></td>").text(event.data.id));
    exploit.append($("<td></td>").text(event.data.name));
    exploit.append($("<td></td>").text(event.data.type));
    exploit.append($("<td></td>").text(event.data.hits));
    exploit.append($("<td></td>").append(
        $("<button></button>").attr('type', 'button').attr('class', 'btn btn-danger btn-round btn-just-icon').click(function () { deleteExploit(event.data.id); }).append(
            $("<i></i>").attr("class", "material-icons").text("delete")
        ).append(
            $("<div></div>").attr("class", "ripple-container")
        )
    ));

    var old_exploit = $("#exploit_id" + event.data.id);
    if (old_exploit.length > 0) {
        old_exploit.replaceWith(exploit);
    } else {
        exploit_table.append(exploit);
    }
}

function onExploitDelete(event) {
    var exploit_element = $("#exploit_id" + event.data.id);

    if (exploit_element.length >= 0) {
        exploit_element.remove();
    }
}

function onExploitDrop(event) {
    if (event === undefined)
        return;

    event.stopPropagation();
    event.preventDefault();

    if (event.dataTransfer.files.length > 0) {
        var file = event.dataTransfer.files[0];

        if (file.size > 1024 * 1024) {
            notify("warning", "Max upload file size is 1M");
            return;
        }

        exploit_drop.text("File: " + file.name);

        if (exploit_name.val().length === 0) {
            exploit_name.val(file.name.replace(/\.[^.]+/, ""));
        }

        var reader = new FileReader();
        reader.onload = function (data) {
            exploit_file = data.target.result.replace(/^data:(.*?);base64,/, "");
        };

        reader.readAsDataURL(file);
    }
}

function onExploitDragOver(event) {
    if (event === undefined)
        return;

    event.stopPropagation();
    event.preventDefault();
    event.dataTransfer.dropEffect = 'copy';
}

function addExploit() {
    var valid = true;

    if ((exploit_name.val().length === 0) || !exploit_name.val().match(/^[a-zA-Z0-9]+$/)) {
        exploit_name.parent().addClass('has-error').addClass('has-feedback');
        exploit_name.parent().append(
            $("<span></span>").attr('id', "exploit_name_feedback")
                .attr("class", "glyphicon glyphicon-warning-sign form-control-feedback")
        );

        valid = false;
    } else {
        exploit_name.parent().removeClass('has-error').removeClass('has-feedback');
        $("#exploit_name_feedback").remove();
    }

    if ((exploit_file === null) || exploit_file.length === 0) {
        valid = false;
    }

    if (valid) {
        stompClient.send("/ws/exploit/add", {}, JSON.stringify({
            name: exploit_name.val(),
            type: exploit_type.val(),
            preExec: exploit_preexec.val(),
            script: exploit_file
        }));
        $("#addExploit").modal('hide');
    }
}

function deleteExploit(exploit) {
    stompClient.send("/ws/exploit/delete", {}, JSON.stringify({
        id: exploit
    }));
}

function clearDropZone() {
    exploit_name.val("");
    exploit_drop.text("Drop Exploit here (Max. Size: 1M)");
    exploit_preexec.val("");
    exploit_file = null;
}

$(document).ready(function () {
    var drop_zone = document.getElementById("exploit_drop");

    drop_zone.addEventListener('drop', onExploitDrop, false);
    drop_zone.addEventListener('dragover', onExploitDragOver, false);
});