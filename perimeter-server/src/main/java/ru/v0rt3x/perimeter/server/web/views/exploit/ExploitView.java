package ru.v0rt3x.perimeter.server.web.views.exploit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import ru.v0rt3x.perimeter.server.properties.PerimeterProperties;
import ru.v0rt3x.perimeter.server.web.UIBaseView;
import ru.v0rt3x.perimeter.server.web.UIView;
import ru.v0rt3x.perimeter.server.web.views.agent.AgentTask;
import ru.v0rt3x.perimeter.server.web.views.agent.AgentTaskQueue;
import ru.v0rt3x.perimeter.server.web.views.agent.AgentTaskType;
import ru.v0rt3x.perimeter.server.web.views.agent.AgentType;
import ru.v0rt3x.perimeter.server.web.views.team.Team;
import ru.v0rt3x.perimeter.server.web.views.team.TeamRepository;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Controller
@UIView(name = "exploit", linkOrder = 3, link = "/exploit/", title = "Exploits", icon = "polymer")
public class ExploitView extends UIBaseView {

    @Autowired
    private ExploitRepository exploitRepository;

    @Autowired
    private TeamRepository teamRepository;

    @Autowired
    private AgentTaskQueue agentTaskQueue;

    @Autowired
    private PerimeterProperties perimeterProperties;

    @ModelAttribute("EXPLOITS")
    public List<Exploit> getExploits() {
        return exploitRepository.findAll();
    }

    @MessageMapping("/exploit/add")
    private void addExploit(Exploit exploit) {
        eventProducer.saveAndNotify(exploitRepository, exploit);
    }

    @MessageMapping("/exploit/delete")
    private void deleteExploit(Exploit exploit) {
        eventProducer.deleteAndNotify(exploitRepository, exploit);
    }

    @MessageMapping("/exploit/execute")
    private void executeExploit(Exploit exploitRef) {
        Exploit exploit = exploitRepository.findById(exploitRef.getId());

        if (Objects.nonNull(exploit)) {
            scheduleExploitExecution(exploit);
        }
    }

    @RequestMapping(value = "/exploit/", method = RequestMethod.GET)
    private String index(Map<String, Object> context) {
        addNavButton(context, "add", "success", "data-toggle=\"modal\" data-target=\"#addExploit\" onclick=\"clearDropZone();\"");

        return "exploit";
    }

    @Scheduled(fixedRateString = "${perimeter.exploit.execution-interval}")
    private void scheduleExploitsExecution() {
        agentTaskQueue.clear();

        exploitRepository.findAll().parallelStream()
            .forEach(this::scheduleExploitExecution);
    }

    private void scheduleExploitExecution(Exploit exploit) {
        AgentTask executionTask = new AgentTask();
        Map<String, Object> parameters = new LinkedHashMap<>();

        parameters.put("exploit", exploit);
        parameters.put("flagPattern", perimeterProperties.getFlag().getPattern().pattern());
        parameters.put("teams", teamRepository.findAllByActive(true));

        executionTask.setType(AgentTaskType.EXECUTE);
        executionTask.setParameters(parameters);

        agentTaskQueue.queueTask(executionTask);
    }
}
