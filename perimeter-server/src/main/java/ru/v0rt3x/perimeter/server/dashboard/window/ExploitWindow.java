package ru.v0rt3x.perimeter.server.dashboard.window;

import ru.v0rt3x.perimeter.server.dashboard.window.modal.ExploitContextMenuWindow;
import ru.v0rt3x.perimeter.server.dashboard.window.modal.ExploitsContextMenuWindow;
import ru.v0rt3x.shell.curses.input.KeyCode;
import ru.v0rt3x.shell.curses.input.MouseKey;
import ru.v0rt3x.shell.curses.window.Rectangle;
import ru.v0rt3x.shell.curses.window.Window;
import ru.v0rt3x.shell.curses.window.WindowManager;
import ru.v0rt3x.perimeter.server.exploit.dao.Exploit;
import ru.v0rt3x.perimeter.server.exploit.dao.ExploitExecutionResultRepository;
import ru.v0rt3x.perimeter.server.exploit.dao.ExploitRepository;
import ru.v0rt3x.shell.console.ansi.ConsoleColor;
import ru.v0rt3x.shell.console.ansi.ConsoleTextStyle;

import java.io.IOException;

import static ru.v0rt3x.shell.console.ansi.ConsoleColor.*;
import static ru.v0rt3x.shell.console.ansi.ConsoleColor.BRIGHT_RED;
import static ru.v0rt3x.shell.console.ansi.ConsoleTextStyle.*;
import static ru.v0rt3x.shell.console.ansi.ConsoleTextStyle.NORMAL;

public class ExploitWindow extends Window {

    private final ExploitRepository exploitRepository;
    private final ExploitExecutionResultRepository resultRepository;

    public ExploitWindow(WindowManager windowManager) {
        super(windowManager, "Exploit Statistics", 22, 49, Math.max(7, windowManager.getCurses().getScreenHeight() - 24), 58, RED, BRIGHT_WHITE, null, 1);

        this.exploitRepository = context.getBean(ExploitRepository.class);
        this.resultRepository = context.getBean(ExploitExecutionResultRepository.class);
    }

    @Override
    protected void onMouseClick(MouseKey key, int x, int y) throws IOException {
        if (key.equals(MouseKey.RIGHT)) {
            ExploitsContextMenuWindow contextMenu = windowManager.createWindow(ExploitsContextMenuWindow.class, "exploits_menu");

            contextMenu.draw(true);
        }
    }

    @Override
    protected void onDraw() throws IOException {
        write(2, 2, BRIGHT_WHITE, BOLD, String.format("Exploits Registered: %s", exploitRepository.count()));

        write(4, 2, BRIGHT_WHITE, BOLD, "Name");
        write(4, 15, BRIGHT_WHITE, BOLD, "Type");
        write(4, 24, BRIGHT_WHITE, BOLD, "Priority");
        write(4, 33, BRIGHT_WHITE, BOLD, "Hits");
        write(4, 41, BRIGHT_WHITE, BOLD, "Last Run");

        int line = 6;
        for (Exploit exploit: exploitRepository.findAll()) {
            long countTotal = resultRepository.findAllByExploit(exploit).stream()
                .filter(result -> result.getExitCode() != 68)
                .count();

            long countSuccess = resultRepository.findAllByExploit(exploit).stream()
                .filter(result -> result.getExitCode() == 0)
                .count();

            ConsoleColor statusColor = exploit.isDisabled() ? BRIGHT_WHITE : ((countSuccess == countTotal) ? BRIGHT_GREEN : BRIGHT_RED);
            ConsoleTextStyle statusStyle = exploit.isDisabled() ? STRIKED : NORMAL;
            String lastRunStatus = exploit.isDisabled() ? "DISABLED" : String.format("%02d / %02d", countSuccess, countTotal);

            Rectangle rect = contextMenu(line, 2, window.getWidth() - 4, () -> {
                ExploitContextMenuWindow contextMenu = windowManager.createWindow(ExploitContextMenuWindow.class, "exploit_menu");
                contextMenu.setExploit(exploit);

                contextMenu.draw(true);
                //windowManager.draw();
            });

            write(rect.getX(), 2, BRIGHT_WHITE, statusStyle, curses.wrapLine(exploit.getName(), 12));
            write(rect.getX(), 15, BRIGHT_WHITE, statusStyle, curses.wrapLine(exploit.getType(), 8));
            write(rect.getX(), 24, BRIGHT_WHITE, statusStyle, curses.wrapLine(exploit.getPriority().toString(), 8));
            write(rect.getX(), 33, BRIGHT_WHITE, statusStyle, String.format("%07d", exploit.getHits()));
            write(rect.getX(), 41, statusColor, statusStyle, lastRunStatus);

            line++;
        }
    }

    @Override
    public void onKeyPress(KeyCode keyCode) throws IOException {

    }
}
